on: workflow_dispatch

jobs:
  linux:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
        - spec: cp310-musllinux_aarch64
          foreign_arch: true
          test_args: '{project}/c'
    steps:
    - name: clone repo
      uses: actions/checkout@v2

    - name: configure docker foreign arch support
      uses: docker/setup-qemu-action@v1
      if: ${{ matrix.foreign_arch || false }}

    - name: build/test wheels
      env:
        CFLAGS: -Dffi_call=cffistatic_ffi_call  # override name for ffi_call to break hard if we linked against someone else's libffi
        CIBW_ARCHS_LINUX: all
        CIBW_BUILD: ${{ matrix.spec }}
        CIBW_BEFORE_BUILD: |
          set -eux && \
          curl -L -O https://github.com/libffi/libffi/archive/v3.4.2.tar.gz && \
          tar zxf v3.4.2.tar.gz && cd libffi-3.4.2 && \
          ./autogen.sh && \
          ./configure --without-gcc-arch --disable-docs --with-pic --enable-shared=no && \
          make && \
          make install && \
          ldconfig || true
        CIBW_ENVIRONMENT_PASS_LINUX: CFLAGS  # ensure that the build container can see our overridden build config
        CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_img || '' }}
        CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_img || '' }}
        CIBW_PRERELEASE_PYTHONS: 'True'
        CIBW_TEST_REQUIRES: pytest py
        CIBW_TEST_COMMAND: PYTHONUNBUFFERED=1 python -m pytest ${{ matrix.test_args || '{project}' }}  # default to test all
      run: |
        python -m pip install --upgrade "${{ matrix.cibw_version || 'cibuildwheel' }}"

        # actually build libffi + wheel (using env tweaks above)
        python -m cibuildwheel --output-dir dist .


    - name: upload artifacts
      uses: actions/upload-artifact@v2
      with:
        path: dist
        if-no-files-found: error
